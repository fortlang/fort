comment ";;"

Module ::= toplevel Decl

Decl nonterminal
  TypeDecl ::= "type" UIdent "=" Type
  PrefixDecl ::= "operator" PrefixOp "=" QualLIdent
  InfixDecl ::= "operator" InfixOp "=" InfixInfo
  ExpDecl ::= ExpDecl
  QualDecl ::= "qualifier" UIdent "=" AString
  ExportDecl ::= "export" AString "=" QualLIdent "`" Type "`"

InfixInfo ::= QualLIdent Fixity ADouble

ExpDecl nonterminal
  Binding ::= Binding "=" Exp
  TailRec ::= TailRecDecls

Binding nonterminal
  Delayed ::= "~" LIdent
  Immediate ::= Pat

TailRecDecls ::= layout "tailrec" TailRecDecl

TailRecDecl ::= LIdent "=" "\\" LIdent "->" .Typed ;; BAL: can have a type on the LIdents...

Exp nonterminal
  Where ::= .Lam layout "where" ExpDecl
  ---
  Lam ::= "\\" terminator "" Binding "->" .Lam
  ---
  Typed ::= .Typed ":" "`" Type "`"
  ---
  With ::= .With layout "with" FieldDecl
  ---
  InfixOper ::= .InfixOper InfixOp .Lam
  ---
  App ::= .App .PrefixOper
  ---
  PrefixOper ::= PrefixOp .Exp0
  --- Exp0
  XDot ::= .Exp0 "." LIdent
  ;; ^ either a qualified name or a record field selector
  Extern ::= "extern" AString "`" Type "`" 
  Do ::= layout "do" Stmt
  If ::= layout "if" IfBranch
  Case ::= "case" Exp layout "of" CaseAlt
  XRecord ::= layout "record" FieldDecl
  Record ::= "{" terminator "," FieldDecl "}"
  Tuple ::= tuple Exp
  Parens ::= "(" Exp ")"
  Unit ::= "()"
  Array ::= "[" terminator "," Exp "]"
  XArray ::= layout "array" Exp
  EType ::= "`" Type "`"
  Var ::= LIdent
  Con ::= UIdent
  Scalar ::= Scalar

IfBranch ::= .InfixOper "->" Exp
FieldDecl ::= LIdent "=" Exp
CaseAlt ::= AltPat "->" Exp

Stmt nonterminal
  TailRecLet ::= TailRecDecls
  Stmt ::= Exp
  XLet ::= Exp "=" Exp
    ;; parsed as Exp then converted to Pat

AltPat nonterminal
  PEnum ::= UIdent
  PCon ::= UIdent Pat
  PScalar ::= Scalar
  PDefault ::= LIdent

Pat nonterminal
  PTyped ::= Pat ":" "`" Type "`"
  PTuple ::= tuple Pat
  PParens ::= "(" Pat ")"
  PUnit ::= "()"
  PVar ::= LIdent

QualLIdent nonterminal
  Qual ::= UIdent "." LIdent
  UnQual ::= LIdent

Fixity nonterminal
  InfixN ::= "infix"
  InfixL ::= "infixl"
  InfixR ::= "infixr"

Type nonterminal
  TLam ::= "\\" terminator "" LIdent "=>" Type
  ---
  TFun ::= .TApp "->" .TFun
  ---
  TApp ::= .TApp .Type0
  --- Type0
  TRecord ::= layout "Record" TField
  TSum ::= layout "Sum" TSum
  TTuple ::= tuple Type
  TParens ::= "(" Type ")"
  TUnit ::= "()"
  TPointer ::= "Pointer"
  TArray ::= "Array"
  TVector ::= "Vector"
  TOpaque ::= "Opaque" AString
  ;; String used by the type checker
  TString ::= "String"
  TUInt ::= "U"
  TInt ::= "I"
  TFloat ::= "F"
  TChar ::= "C"
  TBool ::= "Bool"
  TVar ::= LIdent
  TName ::= UIdent
  TQualName ::= UIdent "." UIdent
  TSize ::= UInt
  TSizes ::= "[" terminator "," Size "]"

Size nonterminal
  SzNat ::= UInt
  SzVar ::= LIdent

TSum nonterminal
  TCon ::= UIdent ":" Type
  TEnum ::= UIdent

TField ::= LIdent ":" Type

Scalar nonterminal
  ATrue ::= "True"
  AFalse ::= "False"
  Double ::= ADouble
  UInt ::= UInt
  Int ::= terminal ('-') digit (digit | '_')*
  Char ::= terminal '\'' ((char - '\'' - '\\') | ('\\' '\'') | ('\\' '\\') | ('\\' 'n') | ('\\' digit+)) '\''
  String ::= AString

UInt nonterminal
  Dec ::= terminal digit (digit | '_')*
  Hex ::= terminal "0" ('x' | 'X') (digit | ['a' .. 'f'] | ['A' .. 'F']) (digit | ['a' .. 'f'] | ['A' .. 'F'] | '_')*
  Oct ::= terminal "0" ('o' | 'O') ['0' .. '7'] (['0' .. '7'] | '_')*
  Bin ::= terminal "0" ('b' | 'B') ['0' .. '1'] (['0' .. '1'] | '_')*

LIdent ::= terminal (lower | '_') (letter | digit | '_' | '-' | '\'')*
UIdent ::= terminal upper         (letter | digit | '_' | '-' | '\'')*
ADouble ::= terminal ('-')? digit (digit | '_')* '.' digit (digit | '_')* ('e' '-'? digit (digit | '_')*)?
AString ::= terminal '"' ((char - '"' - '\\') | ('\\' '"') | ('\\' '\\') | ('\\' 'n') | ('\\' digit+) | ('\\' 'x' (digit | ['a' .. 'f'])+))* '"'

InfixOp  ::= terminal           ('+' | '-' | '=' | '!' | '#' | '$' | '%' | '^' | '&' | '*' | '|' | '/' | '<' | '>' | '.' | '?' | '~' | ':')+
PrefixOp ::= terminal '@' ('@' | '+' | '-' | '=' | '!' | '#' | '$' | '%' | '^' | '&' | '*' | '|' | '/' | '<' | '>' | '.' | '?' | '~' | ':')*
