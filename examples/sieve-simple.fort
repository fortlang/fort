qualifier Prelude = "lib/prelude.fort"

main = output-sieve $ run-sieve init-sieve

init-sieve = record
  count = 0
  next = 2
  primes = alloca `Array 10 Int`

run-sieve = \sv -> do
  loop sv $ \sv -> if
    sv.count == countof sv.primes -> Done sv
    otherwise -> if
      is-prime sv -> do
        sv.primes # sv.count := sv.next
        Continue $ sv with
          count = sv.count + 1
	  next = sv.next + 1
      otherwise -> Continue $ sv with { next = sv.next + 1 }

is-prime = \sv -> do
  loop 0 $ \i -> if
    i == sv.count -> Done True
    sv.next % @(sv.primes # i) == 0 -> Done False
    otherwise -> Continue (i + 1)

output-sieve = \sv -> do
  repeat-from 0 sv.count $ \i -> do
    println @(sv.primes # i)
