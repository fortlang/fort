qualifier Lex = "lib/lex.fort"

test : `()` = do
  buf = alloca `CharBuf`

  s = "+  @++ +@ + \\"
  _ = memcpy buf s (countof s)
  println $ tokenize grammar buf (countof s)
  println "---"

  s = "Fooo   Sum   B @@ Record Somereallylongidentifier1234567890"
  _ = memcpy buf s (countof s)
  println $ tokenize grammar buf (countof s)
  ()

grammar = many token >>> eof

token =
  spaces |||
  lident |||
  uident |||
  number |||
  comment |||
  string-lit |||
  char-lit |||
  punctuation |||
  user-op |||
  (any-char >>> rest-of-line >>> accept Err)

;; BAL: non-visible (error token)

punctuation : `RE` = newline ||| lbrace ||| rbrace ||| lparen ||| rparen ||| lbracket ||| rbracket ||| comma ||| semicolon
  where
    newline : `RE` = char nl >>> accept Newline
    lbrace : `RE` = char '{' >>> accept LBrace
    rbrace : `RE` = char '}' >>> accept RBrace
    lparen : `RE` = char '(' >>> accept LParen
    rparen : `RE` = char ')' >>> accept RParen
    lbracket : `RE` = char '[' >>> accept LBracket
    rbracket : `RE` = char ']' >>> accept RBracket
    comma : `RE` = char ',' >>> accept Comma
    semicolon : `RE` = char ';' >>> accept Semicolon

user-op : `RE` = prefix-op ||| infix-op
prefix-op : `RE` = char '@' >>> many op-char >>> accept PrefixOp

op-char : `RE` =
  between '<' '@' |||
  between '#' '&' |||
  between '-' '/' |||
  char '*' |||
  char '+' |||
  char '!' |||
  char '|' |||
  char ':' |||
  char backslash |||
  char '^' |||
  char '`' |||
  char '~'

comment : `RE` = char ';' >>> char ';' >>> rest-of-line >>> accept Comment

number : `RE` = hexidecimal ||| octal ||| binary ||| decimal

lident : `RE` = lower >>> many ident-char >>> (keywords lident-keywords ||| accept LIdent)
uident : `RE` = upper >>> many ident-char >>> (keywords uident-keywords ||| accept UIdent)

ident-char : `RE` = lower ||| upper ||| digit ||| char single-quote ||| char '-'

infix-op : `RE` = some op-char >>> (keywords op-keywords ||| accept InfixOp)

type KeywordTable = \a => Array 32 (KeywordTableElem a) ;; BAL: compute the size of this (FEATURE)

type KeywordTableElem = \a => Record
  count: Int
  data: Array 32 (String, a) ;; BAL: compute the size of this (FEATURE)

keyword-table = \arr -> do
  tbl = alloca `KeywordTable Token` ;; BAL: extract token type from array
  loop 0 $ \i -> if
    i >= countof tbl -> Done ()
    otherwise -> do
      (tbl # i).count := 0
      Continue (i + 1)

  p = alloca $ typeof arr
  p := arr
  ;; ^ BAL: should be able to loop over this with immutable array? (FEATURE)

  loop 0 $ \i -> if
    i >= countof p -> Done ()
    otherwise -> do
      (s, tag) = @(p # i)
      subtbl-index = strlen s - 1
      assert (subtbl-index >= 0) "unable to insert empty string into keyword table"
      elem = tbl # subtbl-index
      elem.data # @elem.count := (s, tag)
      elem.count += 1
      Continue (i + 1)

  tbl

keywords = \tbl st -> do
  len = token-length st
  subtbl-index = len - 1
  if
    subtbl-index >= countof tbl -> Err ;; BAL: should be > longest computed identifier (FEATURE)
    otherwise -> do
      k0 = st.char-buf # st.prev-char-index
      subtbl = tbl # subtbl-index

      loop 0 $ \i -> do
        if
          i >= @subtbl.count -> Done Err
          otherwise -> do
            (k, tag) = @(subtbl.data # i)
            if
              memcmp k0 k len -> Done $ accept tag st
              otherwise -> Continue (i + 1)

type Token = Sum
  Cast
  Newline
  LBrace
  RBrace
  LParen
  RParen
  LBracket
  RBracket
  Comma
  Semicolon
  PrefixOp
  Spaces
  Comment
  StringLit
  CharLit
  Integer
  Float
  Hexidecimal
  Octal
  Binary
  LIdent
  UIdent
  InfixOp
  TArray
  TBool
  TC
  TF
  VFalse
  TI
  TOpaque
  TPointer
  TRecord
  TString
  TSum
  VTrue
  TU
  VArray
  Case
  Do
  Export
  Extern
  If
  Infix
  Infixl
  Infixr
  Of
  Operator
  Qualifier
  VRecord
  TailRec
  Type
  Where
  With
  Tilde
  Arrow
  Equal
  Backtick
  Backslash
  Colon
  Dot
  FatArrow
  Err

uident-keywords = keyword-table
  [ ("C", TC) ;; BAL: automagically create these sum types from the string (FEATURE)
  , ("F", TF)
  , ("I", TI)
  , ("U", TU)
  , ("Sum", TSum)
  , ("True", VTrue)
  , ("Bool", TBool)
  , ("Array", TArray)
  , ("False", VFalse)
  , ("String", TString)
  , ("Opaque", TOpaque)
  , ("Record", TRecord)
  , ("Pointer", TPointer)
  ]

lident-keywords = keyword-table
  [ ("array", VArray)
  , ("case", Case)
  , ("do", Do)
  , ("export", Export)
  , ("extern", Extern)
  , ("if", If)
  , ("infix", Infix)
  , ("infixl", Infixl)
  , ("infixr", Infixr)
  , ("of", Of)
  , ("cast", Cast)
  , ("operator", Operator)
  , ("qualifier", Qualifier)
  , ("record", VRecord)
  , ("tailrec", TailRec)
  , ("type", Type)
  , ("where", Where)
  , ("with", With)
  ]

op-keywords = keyword-table
  [ ("~", Tilde)
  , ("->", Arrow)
  , ("=", Equal)
  , ("`", Backtick)
  , ("\\", Backslash)
  , (":", Colon)
  , (".", Dot)
  , ("=>", FatArrow)
  ]

