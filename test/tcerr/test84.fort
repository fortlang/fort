
qualifier Prelude = "lib/prelude.fort"

type Loop = Sum
  EvenLoop: Int
  OddLoop: Int

evenLoop = \i -> cast (EvenLoop i) `Loop`
oddLoop = \i -> cast (OddLoop i) `Loop`

main = do
  go = \a0 -> do
    loop a0 $ \a -> case a of
      EvenLoop i -> if
        i == 0 -> Done Even
        True -> Continue (oddLoop True)
      OddLoop i -> if
        i == 0 -> Done Odd
        True -> Continue (evenLoop (i - 1))

  even = \x -> go (evenLoop x)
  odd = \x -> go (oddLoop x)

  print "5 is "
  println (even 5)
  print "4 is "
  println (even 4)
  print "5 is not "
  println (odd 5)
  print "4 is not "
  println (odd 4)
  print "0 is not "
  a = case 0 of
    0 -> even 3
    _ -> Even
  println a


