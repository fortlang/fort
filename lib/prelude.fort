type Int = I 32
type UInt = U 32
type Char = C 8
type Double = F 64
type Float = F 32
type Size = U 64

operator $ = apply infixr 0.0
apply = \f ~a -> f a

operator .. = compose infixr 9.0
operator .> = forward-compose infixl 9.0

forward-compose = \f g x -> g (f x)

compose = \f g x -> f (g x)

pair = \x y -> (x, y)
swap = \(x, y) -> (y, x)
flip = \f ~a ~b -> f b a

operator == = equal infix 4.0
equal = curry Prim.eq

operator != = not-equal infix 4.0
not-equal = curry Prim.ne

operator > = greater-than infix 4.0
greater-than = curry Prim.gt

operator < = less-than infix 4.0
less-than = curry Prim.lt

operator >= = greater-than-or-equal infix 4.0
greater-than-or-equal = curry Prim.gte

operator <= = less-than-or-equal infix 4.0
less-than-or-equal = curry Prim.lte

operator && = and infixr 3.0
operator || = or infixr 2.0

operator * = multiply infixl 7.0
multiply = curry Prim.mul

operator / = divide infixl 7.0
divide = curry Prim.div

operator % = remainder infixl 7.0
remainder = curry Prim.rem

operator + = add infixl 6.0
add = curry Prim.add

operator - = subtract infixl 6.0
subtract = curry Prim.sub

curry = \f x y -> f (x, y)
curry3 = \fn a b c -> fn (a, b, c)
curry4 = \fn a b c d -> fn (a, b, c, d)
curry5 = \fn a b c d e -> fn (a, b, c, d, e)
curry6 = \fn a b c d e f -> fn (a, b, c, d, e, f)
curry7 = \fn a b c d e f g -> fn (a, b, c, d, e, f, g)
curry8 = \fn a b c d e f g h -> fn (a, b, c, d, e, f, g, h)
curry9 = \fn a b c d e f g h i -> fn (a, b, c, d, e, f, g, h, i)
curry10 = \fn a b c d e f g h i j -> fn (a, b, c, d, e, f, g, h, i, j)

operator @ = load
load = Prim.load

operator := = store infix -1.0
store = curry Prim.store

operator # = index infixl 9.0
index = curry Prim.index

operator & = bit-and infixl 7.0
bit-and = curry Prim.and

operator ^ = bit-xor infixl 6.0
bit-xor = curry Prim.xor

operator | = bit-or infixl 5.0
bit-or = curry Prim.or

operator << = bit-shift-l infixl 8.0
bit-shift-l = curry Prim.shl

operator >> = bit-shift-r infixl 8.0
bit-shift-r = curry Prim.shr

append-build = Prim.append-build

build = append-build "cbits/builtins.c Generated/instrs.ll"

debug = \~a -> when Prim.slow-safe-build $ do
  print "DEBUG"
  brackets $ print a

unsafe = \f -> case f of
  Ok a -> a
  b -> panic b

bracket = \pre post f -> do
  _ = pre
  a = f
  _ = post
  a

loop = \a0 ~f -> do
  tailrec
    go = \a -> case f a of
      Continue a' -> go a'
      Done b -> b
  go a0

assert = \r a -> when (Prim.slow-safe-build && not r) $ panic $ AssertionFailed a
;; BAL: add a builtin that will evaluate to the file, line, col

panic = \a -> do
  println ""

  ;; put terminal back into normal mode
  ;; BAL: unset-alt-buf
  ;; BAL: unset-raw-mode

  print "panic:"
  println a

  exit 2

negate = Prim.neg

exit = Prim.exit

panic-on-err = \a -> case a of
  Ok b -> b
  otherwise -> panic a

otherwise = True

alloca = Prim.alloca

void = \f -> do
  _ = f
  ()

or = \a ~b -> if
  a -> True
  otherwise -> b

and = \a ~b -> if
  a -> b
  otherwise -> False

when = \a ~f -> if
  a -> f
  otherwise -> ()

not = \r -> if
  r -> False
  otherwise -> True

print = Prim.print

println = \a -> do
  print a
  print '\n'

brackets = bracket (print '[') (print ']')

min = \x y -> if
  x <= y -> x
  otherwise -> y

max = \x y -> if
  x >= y -> x
  otherwise -> y

clamp = \x y z -> min (max x y) z

countof = Prim.countof
typeof = Prim.typeof

from-ok = \a0 x -> case x of
  Ok a -> a
  _ -> a0

cast = curry Prim.cast

argcp = extern "FORT_argc" `Pointer Int`
argvp = extern "FORT_argv" `Pointer (Pointer (Array 256 (Pointer Char)))`

argc = @argcp
argv = @argvp

arg1 = do
  when (argc < 2) $ panic "expected at least 1 command line argument"
  @(argv # 1)
  
repeat = repeat-from 0

repeat-from = \i0 n f -> loop i0 $ \i -> if
  i < n -> do
    f i
    Continue (i + 1)
  otherwise -> Done ()

repeat-accum = repeat-accum-from 0

repeat-accum-from = \i0 n a0 f -> loop (i0, a0) $ \(i, a) -> if
  i < n -> Continue (i + 1, f i a)
  otherwise -> Done a

abs = Prim.abs
sqrt = Prim.sqrt
sin = Prim.sin
cos = Prim.cos
floor = Prim.floor
ceiling = Prim.ceil
truncate = Prim.truncate
round = Prim.round

atoi = extern "atoi" `Pointer Char -> Int`

;; clock-gettime = extern "clock_gettime_monotonic" `() -> Double`

inc = \p x -> p := @p + x
operator += = inc infix -1.0

dec = \p x -> p := @p - x
operator -= = dec infix -1.0

fst = \(a, _) -> a
snd = \(_, b) -> b

c-memcpy = \a b c -> Prim.memcpy (a, b, c)
memcpy = \a b c -> c-memcpy (cast a `Pointer Char`) (cast b `Pointer Char`) c
c-memmove = \a b c -> Prim.memmove (a, b, c)
memmove = \a b c -> c-memmove (cast a `Pointer Char`) (cast b `Pointer Char`) c
c-memset = \a b c -> Prim.memset (a, b, c)
memset = \a b c -> c-memset (cast a `Pointer Char`) b c

c-puts = extern "puts" `Pointer Char -> Int`
puts = \s -> c-puts (cast s `Pointer Char`)

operator |= = store-bit-or infix -1.0
store-bit-or = \p i -> p := @p | i

c-memcmp = extern "memcmp" `(Pointer Char, Pointer Char, Size) -> Int`

memcmp = \p q n -> do
  r = c-memcmp (cast p `Pointer Char`, cast q `Pointer Char`, cast n `Size`)
  cast (r == 0) `Bool`

c-strlen = extern "strlen" `Pointer Char -> Size`
strlen = \s -> cast (c-strlen (cast s `Pointer Char`)) `Int`

raw-mode = bracket set-raw-mode unset-raw-mode
~unset-raw-mode = c-termios-unset-raw-mode ()
~set-raw-mode = c-termios-set-raw-mode ()

c-termios-set-raw-mode = extern "termios_setRawMode" `() -> ()`
c-termios-unset-raw-mode = extern "termios_unsetRawMode" `() -> ()`

c-get-terminal-size = extern "getTerminalSize" `() -> Int`

~get-terminal-size = case c-get-terminal-size () of
    0 -> Err
    sz -> Ok { width = sz >> 16, height = sz & 0xffff }

type File = Opaque "FILE"

c-fread = extern "fread" `(Pointer Char, Size, Size, Pointer File) -> Size`
c-fwrite = extern "fwrite" `(Pointer Char, Size, Size, Pointer File) -> Size`
c-fclose = extern "fclose" `Pointer File -> Int`

fread = \buf n fp -> do
  c-fread (cast buf `Pointer Char`, cast 1 `Size`, cast n `Size`, fp)

c-get-errno = extern "getErrno" `() -> Int`
~errno = c-get-errno ()

c-fseek = extern "fseek" `(Pointer File, U 64, Int) -> Int`
c-ftell = extern "ftell" `Pointer File -> U 64`

seek-set = 0
seek-cur = 1
seek-end = 2

ftell = \fp -> do
  r = c-ftell fp
  if
    r == cast -1 `U 64` -> ErrFTell errno
    otherwise -> Ok r

fseek = \fp offset whence -> case c-fseek (fp, cast offset `U 64`, cast whence `Int`) of
  0 -> Ok ()
  _ -> ErrFSeek errno

fsize = \fp ->
  with-ok (ftell fp) $ \i ->
    with-ok (fseek fp 0 seek-end) $ \() ->
      with-ok (ftell fp) $ \j -> 
        with-ok (fseek fp 0 i) $ \() -> Ok j

c-fopen = extern "fopen" `(Pointer Char, Pointer Char) -> Pointer File`

c-fputc = extern "fputc" `(Int, Pointer File) -> Int`
c-fputs = extern "fputs" `(Pointer Char, Pointer File) -> Int`

fputs = \s fp -> do
  r = c-fputs (cast s `Pointer Char`, fp)
  if r >= 0 -> Ok ()
     otherwise -> ErrFPutS

fputc = \i fp -> do
  i' = c-fputc (i, fp)
  if i' == i -> Ok ()
     otherwise -> ErrFPutC

fopen = \fn mode -> do
  fp = c-fopen (cast fn `Pointer Char`, cast mode `Pointer Char`)
  if
    is-null fp -> ErrFOpen errno
    otherwise -> Ok fp

fclose = \fp -> if
  c-fclose fp == 0 -> Ok ()
  otherwise -> ErrFClose errno

defer = \x g f -> case x of
  Ok a -> do
    b = f a
    g a
    b
  err -> err

with-ok = \x f -> case x of
  Ok a -> f a
  err -> err

with-fopen = \fn perms f -> case fopen fn perms of
  Ok fp -> do
    a = f fp
    case fclose fp of
      Ok () -> a
      err -> err
  err -> err
 
fread-contents = \fn buf -> do
  with-fopen fn "r" $ \fp -> do
    with-ok (fsize fp) $ \len -> do
      buf-n = cast (countof buf) `U 64` 
      if
        len > buf-n -> ErrFReadContentsTooLarge (len, buf-n)
        otherwise -> do
	  n = fread buf len fp
	  if
            n < len -> ErrFReadContentsIncomplete (n, len)
            otherwise -> Ok len

is-null = \p -> p == cast 0 (typeof p)

c-getchar = extern "getchar" `() -> Int`
~getchar = cast (c-getchar ()) `Char`

